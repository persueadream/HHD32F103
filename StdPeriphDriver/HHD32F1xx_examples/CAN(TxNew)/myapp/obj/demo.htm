<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\myapp\obj\demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\myapp\obj\demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Mon Aug 07 10:06:23 2017
<BR><P>
<H3>Maximum Stack Usage =         32 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; USART_Configuration &rArr; UART_Open
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMonitor_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMonitor_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC1_2_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[32]">ADC3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[b]">BOD_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1c]">CAN_IRQHandler</a> from main.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[c]">DAC_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[13]">DMA1_CHANNEL1_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[14]">DMA1_CHANNEL2_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[15]">DMA1_CHANNEL3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[16]">DMA1_CHANNEL4_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[17]">DMA1_CHANNEL5_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[18]">DMA1_CHANNEL6_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[19]">DMA1_CHANNEL7_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[39]">DMA2_CHANNEL1_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[3a]">DMA2_CHANNEL2_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[3b]">DMA2_CHANNEL3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[3c]">DMA2_CHANNEL4_5_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[7]">DebugMonitor_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[e]">EXTI0_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2c]">EXTI15_10_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[f]">EXTI1_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[10]">EXTI2_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[11]">EXTI3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[12]">EXTI4_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[25]">I2C1_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[26]">I2C2_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[3]">MemoryManagement_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[27]">SPI1_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[28]">SPI2_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[34]">SPI3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1f]">TIM10_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[20]">TIM11_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2f]">TIM13_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[30]">TIM14_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1e]">TIM1FAULT_TIM9_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[21]">TIM1_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[24]">TIM4_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[33]">TIM5_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[37]">TIM6_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[38]">TIM7_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2e]">TIM8FAULT_TIM12_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[31]">TIM8_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[29]">UART1_IRQHandler</a> from usart_user.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2a]">UART2_IRQHandler</a> from usart_user.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2b]">UART3_IRQHandler</a> from usart_user.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[35]">UART4_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[36]">UART5_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2d]">USBWAKEUP_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1b]">USB_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[a]">WWDT_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[3e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hhd32f1xx_s.o(.text)
 <LI><a href="#[3f]">fputc</a> from usart_user.o(.text) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[3d]">main</a> from main.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[40]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[62]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[63]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[45]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 362 bytes, Stack size 0 bytes, system_hhd32f1xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetAHBClkDivider
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SelectMainClkSrc
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, system_hhd32f1xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SystemInitial
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMonitor_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMonitor_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMonitor_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA1_CHANNEL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_CHANNEL2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_CHANNEL3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_CHANNEL4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_CHANNEL5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_CHANNEL6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_CHANNEL7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_CHANNEL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_CHANNEL2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_CHANNEL3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_CHANNEL4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1FAULT_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM8FAULT_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USBWAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SYS_SystemInitial</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hhd_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_SystemInitial
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>SYS_SelectMainClkSrc</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hhd_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[46]"></a>SYS_SetAHBClkDivider</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hhd_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[64]"></a>SYS_SelectWDTClkSrc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>SYS_SelectClkOutSrc</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>SYS_SetClkOutDivider</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>SYS_EnableClkOut</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>SYS_DisableClkOut</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>SYS_SetIOFilter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>SYS_PowerDownAngIP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>SYS_PowerUpAngIP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>SYS_EnablePhrClk</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>SYS_DisablePhrClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>SYS_ResetPhr</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>SYS_ResetSystem</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>SYS_BODResetSystem</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>SYS_GetResetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>SYS_ClearResetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>SYS_EnterSleep</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>SYS_SetDeepSleepWakeupPin</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>SYS_ResetDeepSleepWakeupPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>SYS_EnterDeepSleep</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>SYS_EnterPowerDown</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>SYS_IOConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>SYS_IOSetPullup</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>SYS_IOSetPulldown</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>SYS_IOEnableFilter</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>SYS_IODisableFilter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>CAN_SetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hhd_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>CAN_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>CAN_ClearStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_can.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>CAN_SetCMD</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>CAN_ClrCMD</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_can.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>CAN_EnableInt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hhd_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>CAN_DisableInt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hhd_can.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>UART3_IOCFG</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart_user.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[49]"></a>UART2_IOCFG</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart_user.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[48]"></a>UART1_IOCFG</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart_user.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[47]"></a>USART_Configuration</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usart_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Configuration &rArr; UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IOCFG
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IOCFG
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IOCFG
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>USART_Send_user</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart_user.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>frame_get</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, usart_user.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>frame_analay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart_user.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>UART_Test</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[3f]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usart_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[29]"></a>UART1_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteWrite
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART2_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteWrite
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART3_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteWrite
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART_Open</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, hhd_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[57]"></a>UART_ClearIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>

<P><STRONG><a name="[56]"></a>UART_DisableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>

<P><STRONG><a name="[55]"></a>UART_Close</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, hhd_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearIntFlag
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[53]"></a>UART_ByteRead</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>UART_Read</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>UART_ByteWrite</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[84]"></a>UART_Write</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>UART_Send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>UART_PutString</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>UART_PutHex</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>UART_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[52]"></a>UART_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[88]"></a>UART_ClearFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>RCC_Configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_user.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>NVIC_Configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_user.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_user.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
</UL>

<P><STRONG><a name="[1c]"></a>CAN_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN_IOCONFIG</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>CAN_Init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>main</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = main &rArr; USART_Configuration &rArr; UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IOCONFIG
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetCMD
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SystemInitial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8c]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[50]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[8e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[8f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart_user.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[54]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[60]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
