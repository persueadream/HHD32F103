<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Fri Oct 12 14:32:51 2018
<BR><P>
<H3>Maximum Stack Usage =         48 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EXTI0_IRQHandler &rArr; GetExtiPin &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[7]">DebugMonitor_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMonitor_Handler</a><BR>
 <LI><a href="#[1a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC1_2_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[32]">ADC3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[b]">BOD_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from hhd32f10x_it.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1c]">CAN_IRQHandler</a> from can.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[c]">DAC_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[13]">DMA1_CHANNEL1_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[14]">DMA1_CHANNEL2_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[15]">DMA1_CHANNEL3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[16]">DMA1_CHANNEL4_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[17]">DMA1_CHANNEL5_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[18]">DMA1_CHANNEL6_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[19]">DMA1_CHANNEL7_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[39]">DMA2_CHANNEL1_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[3a]">DMA2_CHANNEL2_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[3b]">DMA2_CHANNEL3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[3c]">DMA2_CHANNEL4_5_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[7]">DebugMonitor_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[e]">EXTI0_IRQHandler</a> from gpio.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2c]">EXTI15_10_IRQHandler</a> from gpio.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[f]">EXTI1_IRQHandler</a> from gpio.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[10]">EXTI2_IRQHandler</a> from gpio.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[11]">EXTI3_IRQHandler</a> from gpio.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[12]">EXTI4_IRQHandler</a> from gpio.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from gpio.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from hhd32f10x_it.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[25]">I2C1_IRQHandler</a> from i2c.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[26]">I2C2_IRQHandler</a> from i2c.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[3]">MemoryManagement_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from hhd32f10x_it.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from hhd32f10x_it.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[27]">SPI1_IRQHandler</a> from spi.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[28]">SPI2_IRQHandler</a> from spi.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[34]">SPI3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from hhd32f10x_it.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from delay.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1f]">TIM10_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[20]">TIM11_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2f]">TIM13_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[30]">TIM14_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1e]">TIM1FAULT_TIM9_IRQHandler</a> from pwm.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[21]">TIM1_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from timer.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[24]">TIM4_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[33]">TIM5_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[37]">TIM6_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[38]">TIM7_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2e]">TIM8FAULT_TIM12_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[31]">TIM8_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[29]">UART1_IRQHandler</a> from uart.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2a]">UART2_IRQHandler</a> from uart.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2b]">UART3_IRQHandler</a> from uart.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[35]">UART4_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[36]">UART5_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[2d]">USBWAKEUP_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[1b]">USB_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from hhd32f10x_it.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[a]">WWDT_IRQHandler</a> from startup_hhd32f1xx_s.o(.text) referenced from startup_hhd32f1xx_s.o(RESET)
 <LI><a href="#[3e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hhd32f1xx_s.o(.text)
 <LI><a href="#[3f]">fputc</a> from uart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[3d]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[40]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ca]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[cb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[cc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[cd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ce]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3d]"></a>main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = main &rArr; DeviceInit &rArr; USART_Configuration &rArr; UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hhd32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hhd32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hhd32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hhd32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>SysTick_Init</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>delay_us</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>delay_ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, delay.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Test
</UL>

<P><STRONG><a name="[44]"></a>TimingDelay_Decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>RCC_Configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>NVIC_Configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>sdelay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Test
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitTest
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensor
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Test
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[45]"></a>IRC_TRIM_Print</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[46]"></a>NVIC_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInit
</UL>

<P><STRONG><a name="[48]"></a>ExtClockConfigration</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInit
</UL>

<P><STRONG><a name="[42]"></a>DeviceInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DeviceInit &rArr; USART_Configuration &rArr; UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SystemInitial
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetAHBClkDivider
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtClockConfigration
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>InClockConfigration</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, hal.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>ClkOutputConfig</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetClkOutDivider
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SelectClkOutSrc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableClkOut
</UL>

<P><STRONG><a name="[4c]"></a>ADC_Configuration</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_Configuration &rArr; ADC_SetupChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetupChannels
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdelay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInit
</UL>

<P><STRONG><a name="[54]"></a>GetADCVoltage</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionData
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Test
</UL>

<P><STRONG><a name="[56]"></a>ADC_Test</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCVoltage
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdelay_us
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[59]"></a>ADC_TempSensorConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetupChannels
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[5a]"></a>ADC_TempSensor</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdelay_us
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[60]"></a>GPIO_Configuration</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinsAsOutput
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_Test</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>IO_EXTI_Configuration</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinsAsInput
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[67]"></a>IO_ExtTest</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InvertOutPin
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6b]"></a>GetExtiPin</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetExtiPin &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI0_IRQHandler &rArr; GetExtiPin &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrIntflag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtiPin
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI1_IRQHandler &rArr; GetExtiPin &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrIntflag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtiPin
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI2_IRQHandler &rArr; GetExtiPin &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrIntflag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtiPin
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GetPusleFrameInfo</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrIntflag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPusleFrameInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrIntflag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPusleFrameInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>PusleFrameInfoProcess</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI9_5_IRQHandler &rArr; GetExtiPin &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrIntflag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtiPin
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI15_10_IRQHandler &rArr; GetExtiPin &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrIntflag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtiPin
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>LED_Test</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[72]"></a>I2C_Test</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteArray
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdelay_us
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[74]"></a>I2C_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_IOCONFIG
</UL>

<P><STRONG><a name="[25]"></a>I2C1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1_IRQHandler &rArr; IIC1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C2_IRQHandler &rArr; IIC2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI_Configuration</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Set_SSEL_High
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EnableInt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IOCONFIG
</UL>

<P><STRONG><a name="[7e]"></a>SPI_Test</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_FIFO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Set_SSEL_High
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Reset_SSEL_Low
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearFIFO
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[27]"></a>SPI1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_FIFO
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPI2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_FIFO
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_FIFO
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearFIFO
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>Timer_Configuration</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_START
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_RESET
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableInt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
</UL>

<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>Delay_10us</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_STOP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_START
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_RESET
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ExtTest
</UL>

<P><STRONG><a name="[8b]"></a>UART1_IOCFG</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[4b]"></a>USART_Configuration</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Configuration &rArr; UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IOCFG
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInit
</UL>

<P><STRONG><a name="[d7]"></a>USART_Send_user</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>frame_get</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>frame_analay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>UART2_IOCFG</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>UART3_IOCFG</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>UART_Test</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdelay_us
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3f]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[29]"></a>UART1_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearIntFlag
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART2_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART3_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>CAN_IOCONFIG</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[93]"></a>CAN_Configuration</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IOCONFIG
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitTest
</UL>

<P><STRONG><a name="[95]"></a>CAN_TransmitTest</STRONG> (Thumb, 394 bytes, Stack size 0 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetCMD
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetStatus
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdelay_us
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[dc]"></a>CAN_ReciveTest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>CAN_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>PWM_IOCONFIG</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[9a]"></a>PWM_Configuration</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetRiseDeadZone
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFallDeadZone
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableFaultProtect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IOCONFIG
</UL>

<P><STRONG><a name="[a2]"></a>PWM_Test</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TriggerSoftFault
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdelay_us
</UL>

<P><STRONG><a name="[1e]"></a>TIM1FAULT_TIM9_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1FAULT_TIM9_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ClearFault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ADC_Init</STRONG> (Thumb, 426 bytes, Stack size 12 bytes, hhd_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorConfiguration
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[dd]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hhd_adc.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>ADC_SetupChannels</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, hhd_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_SetupChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorConfiguration
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[de]"></a>ADC_SetTrigger</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hhd_adc.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>ADC_SetHighCmp0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hhd_adc.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>ADC_SetHighCmp1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hhd_adc.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>ADC_SetLowCmp0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hhd_adc.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>ADC_SetLowCmp1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hhd_adc.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>ADC_EnableConversionInt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd_adc.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>ADC_GetConversionData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hhd_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensor
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCVoltage
</UL>

<P><STRONG><a name="[96]"></a>CAN_SetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hhd_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitTest
</UL>

<P><STRONG><a name="[98]"></a>CAN_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitTest
</UL>

<P><STRONG><a name="[e4]"></a>CAN_ClearStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_can.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>CAN_SetCMD</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitTest
</UL>

<P><STRONG><a name="[e5]"></a>CAN_ClrCMD</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_can.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>CAN_EnableInt</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hhd_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitTest
</UL>

<P><STRONG><a name="[e6]"></a>CAN_DisableInt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hhd_can.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>GPIO_ConfigPinsAsInput</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_Configuration
</UL>

<P><STRONG><a name="[61]"></a>GPIO_ConfigPinsAsOutput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[62]"></a>GPIO_SetPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Test
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[70]"></a>GPIO_ResetPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Test
</UL>

<P><STRONG><a name="[69]"></a>GPIO_InvertOutPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ExtTest
</UL>

<P><STRONG><a name="[6a]"></a>GPIO_GetPinState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ExtTest
</UL>

<P><STRONG><a name="[e7]"></a>GPIO_GetPortState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>GPIO_SetPortMask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>GPIO_ResetPortMask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>GPIO_ReadPort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>GPIO_WritePort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>GPIO_EnableInt</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, hhd_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_Configuration
</UL>

<P><STRONG><a name="[6c]"></a>GPIO_ClrIntflag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>GPIO_DisableInt</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, hhd_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[a9]"></a>IIC_SendByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArry
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>SendArry</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hhd_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>

<P><STRONG><a name="[76]"></a>IIC_Init</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, hhd_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[ac]"></a>IIC_GetIICStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>IIC_ReadFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_iic.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>IIC_SetFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadArray
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteByte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteArray
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>IIC_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>IIC_GetByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>IIC_IRQHandler</STRONG> (Thumb, 684 bytes, Stack size 16 bytes, hhd_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetByte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ClearFlag
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetIICStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>

<P><STRONG><a name="[77]"></a>IIC1_IRQHandler</STRONG> (Thumb, 708 bytes, Stack size 16 bytes, hhd_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetByte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ClearFlag
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetIICStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>IIC2_IRQHandler</STRONG> (Thumb, 738 bytes, Stack size 16 bytes, hhd_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetByte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ClearFlag
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetIICStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>IIC_WriteByte</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, hhd_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
</UL>

<P><STRONG><a name="[73]"></a>IIC_WriteArray</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hhd_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
</UL>

<P><STRONG><a name="[b1]"></a>IIC_ReadByte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hhd_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
</UL>

<P><STRONG><a name="[b2]"></a>IIC_ReadArray</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, hhd_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
</UL>

<P><STRONG><a name="[ed]"></a>IIC_SlaveResponseRd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hhd_iic.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>IIC_SlaveGetData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hhd_iic.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>PWM_Init</STRONG> (Thumb, 306 bytes, Stack size 20 bytes, hhd_pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[ef]"></a>PWM_DeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hhd_pwm.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>PWM_SetRelaodFreq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_pwm.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>PWM_SetDuty</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hhd_pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[9e]"></a>PWM_SetRiseDeadZone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[9f]"></a>PWM_SetFallDeadZone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[a0]"></a>PWM_EnableFaultProtect</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hhd_pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[a4]"></a>PWM_ClearFault</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hhd_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1FAULT_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>PWM_Start</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, hhd_pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[f1]"></a>PWM_Stop</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, hhd_pwm.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>PWM_EnableInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hhd_pwm.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>PWM_ADCTrigger</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, hhd_pwm.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>PWM_TriggerSoftFault</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hhd_pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Test
</UL>

<P><STRONG><a name="[b3]"></a>SPI_SetClk</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[7b]"></a>SPI_Open</STRONG> (Thumb, 182 bytes, Stack size 28 bytes, hhd_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClk
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[f4]"></a>SPI_Close</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>SPI_ClearFIFO</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hhd_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Test
</UL>

<P><STRONG><a name="[f5]"></a>SPI_SingleWriteRead</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>SPI_WritetoFIFO</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hhd_spi.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>SPI_ReadFIFOData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>SPI_ClrInt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>SPI_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[f9]"></a>SPI_DisableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>SPI_Set_SSEL_High</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Test
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[80]"></a>SPI_Reset_SSEL_Low</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Test
</UL>

<P><STRONG><a name="[81]"></a>SPI_Write_FIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Test
</UL>

<P><STRONG><a name="[fa]"></a>SPI_TX_FIFO_Not_Empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>POLL_RXFIFO_NOTEMPTY</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hhd_spi.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>SPI_Read_FIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>SYS_SystemInitial</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hhd_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_SystemInitial
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInit
</UL>

<P><STRONG><a name="[b5]"></a>SYS_SelectMainClkSrc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hhd_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[4a]"></a>SYS_SetAHBClkDivider</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hhd_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_SetAHBClkDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInit
</UL>

<P><STRONG><a name="[fc]"></a>SYS_SelectWDTClkSrc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>SYS_SelectClkOutSrc</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkOutputConfig
</UL>

<P><STRONG><a name="[4f]"></a>SYS_SetClkOutDivider</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkOutputConfig
</UL>

<P><STRONG><a name="[50]"></a>SYS_EnableClkOut</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkOutputConfig
</UL>

<P><STRONG><a name="[fd]"></a>SYS_DisableClkOut</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>SYS_SetIOFilter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>SYS_PowerDownAngIP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>SYS_PowerUpAngIP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>SYS_EnablePhrClk</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>SYS_DisablePhrClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>SYS_ResetPhr</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>SYS_ResetSystem</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>SYS_BODResetSystem</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>SYS_GetResetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>SYS_ClearResetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>SYS_EnterSleep</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>SYS_SetDeepSleepWakeupPin</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>SYS_ResetDeepSleepWakeupPin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>SYS_EnterDeepSleep</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>SYS_EnterPowerDown</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>SYS_IOConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>SYS_IOSetPullup</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>SYS_IOSetPulldown</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>SYS_IOEnableFilter</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>SYS_IODisableFilter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_sys.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>TIM_Init</STRONG> (Thumb, 728 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[86]"></a>TIM_ConfigMatch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[112]"></a>TIM_SetTimerCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>TIM_ResetTimerCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>TIM_GetTimerCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>TIM_ClearIntFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hhd_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>TIM_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[115]"></a>TIM_DisableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>TIM_SetCTType</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>TIM_SelectTimerClearSignal</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>TIM_SelectPriSrc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>TIM_SelectSecSrc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>TIM_ConfigMatch0</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>TIM_ConfigMatch1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>TIM_ConfigMatch2</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>TIM_ConfigMatch3</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>TIM_ConfigCapture0</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>TIM_ConfigCapture1</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>TIM_ConfigCapture2</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>TIM_ConfigCapture3</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>TIM_GetCapture0Value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>TIM_GetCapture1Value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>TIM_GetCapture2Value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>TIM_GetCapture3Value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>TIM_START</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>

<P><STRONG><a name="[8a]"></a>TIM_STOP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>

<P><STRONG><a name="[85]"></a>TIM_RESET</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hhd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>

<P><STRONG><a name="[8c]"></a>UART_Open</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, hhd_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[92]"></a>UART_ClearIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>UART_DisableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hhd_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>

<P><STRONG><a name="[b8]"></a>UART_Close</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hhd_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearIntFlag
</UL>

<P><STRONG><a name="[91]"></a>UART_ByteRead</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>UART_Read</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>UART_ByteWrite</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[127]"></a>UART_Write</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>UART_Send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>UART_PutString</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>UART_PutHex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>UART_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[90]"></a>UART_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[12b]"></a>UART_ClearFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hhd_uart.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 374 bytes, Stack size 0 bytes, system_hhd32f1xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SelectMainClkSrc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetAHBClkDivider
</UL>

<P><STRONG><a name="[b4]"></a>SystemInit</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, system_hhd32f1xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SystemInitial
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMonitor_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMonitor_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMonitor_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA1_CHANNEL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_CHANNEL2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_CHANNEL3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_CHANNEL4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_CHANNEL5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_CHANNEL6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_CHANNEL7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_CHANNEL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_CHANNEL2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_CHANNEL3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_CHANNEL4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM8FAULT_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USBWAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hhd32f1xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hhd32f1xx_s.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensor
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensor
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensor
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensor
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensor
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Test
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensor
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Test
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensor
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[12d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[12e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[bc]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[131]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[132]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[43]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitTest
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Test
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PusleFrameInfoProcess
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtiPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ExtTest
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_Configuration
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensor
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Test
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRC_TRIM_Print
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInit
</UL>

<P><STRONG><a name="[133]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[134]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[135]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[136]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[137]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[47]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[66]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_Configuration
</UL>

<P><STRONG><a name="[75]"></a>IIC_IOCONFIG</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[7a]"></a>SPI_IOCONFIG</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[a5]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
</UL>

<P><STRONG><a name="[a7]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hhd_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableInt
</UL>

<P><STRONG><a name="[aa]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hhd_iic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>

<P><STRONG><a name="[b7]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hhd_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[c4]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c3]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[c7]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c6]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
